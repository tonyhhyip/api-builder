// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trigger.proto

/*
	Package builder is a generated protocol buffer package.

	It is generated from these files:
		trigger.proto

	It has these top-level messages:
		Trigger
*/
package builder

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TriggerSource int32

const (
	TriggerSource_GithubWebhook TriggerSource = 0
)

var TriggerSource_name = map[int32]string{
	0: "GithubWebhook",
}
var TriggerSource_value = map[string]int32{
	"GithubWebhook": 0,
}

func (x TriggerSource) String() string {
	return proto.EnumName(TriggerSource_name, int32(x))
}
func (TriggerSource) EnumDescriptor() ([]byte, []int) { return fileDescriptorTrigger, []int{0} }

type Trigger struct {
	Source TriggerSource `protobuf:"varint,1,opt,name=source,proto3,enum=builder.trigger.TriggerSource" json:"source,omitempty"`
	Repo   string        `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (m *Trigger) Reset()                    { *m = Trigger{} }
func (m *Trigger) String() string            { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()               {}
func (*Trigger) Descriptor() ([]byte, []int) { return fileDescriptorTrigger, []int{0} }

func (m *Trigger) GetSource() TriggerSource {
	if m != nil {
		return m.Source
	}
	return TriggerSource_GithubWebhook
}

func (m *Trigger) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func init() {
	proto.RegisterType((*Trigger)(nil), "builder.trigger.Trigger")
	proto.RegisterEnum("builder.trigger.TriggerSource", TriggerSource_name, TriggerSource_value)
}
func (this *Trigger) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Trigger)
	if !ok {
		that2, ok := that.(Trigger)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Repo != that1.Repo {
		return false
	}
	return true
}
func (m *Trigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trigger) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrigger(dAtA, i, uint64(m.Source))
	}
	if len(m.Repo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrigger(dAtA, i, uint64(len(m.Repo)))
		i += copy(dAtA[i:], m.Repo)
	}
	return i, nil
}

func encodeVarintTrigger(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTrigger(r randyTrigger, easy bool) *Trigger {
	this := &Trigger{}
	this.Source = TriggerSource([]int32{0}[r.Intn(1)])
	this.Repo = string(randStringTrigger(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTrigger interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTrigger(r randyTrigger) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTrigger(r randyTrigger) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneTrigger(r)
	}
	return string(tmps)
}
func randUnrecognizedTrigger(r randyTrigger, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTrigger(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTrigger(dAtA []byte, r randyTrigger, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTrigger(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateTrigger(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateTrigger(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTrigger(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTrigger(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTrigger(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTrigger(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Trigger) Size() (n int) {
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovTrigger(uint64(m.Source))
	}
	l = len(m.Repo)
	if l > 0 {
		n += 1 + l + sovTrigger(uint64(l))
	}
	return n
}

func sovTrigger(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTrigger(x uint64) (n int) {
	return sovTrigger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Trigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrigger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (TriggerSource(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrigger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrigger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrigger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrigger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrigger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTrigger
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrigger
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrigger(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrigger = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrigger   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("trigger.proto", fileDescriptorTrigger) }

var fileDescriptorTrigger = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x29, 0xca, 0x4c,
	0x4f, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0x2a, 0xcd, 0xcc, 0x49,
	0x49, 0x2d, 0xd2, 0x83, 0x0a, 0x4b, 0x59, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7,
	0xe7, 0xea, 0xa7, 0xe7, 0xe7, 0x24, 0xe6, 0xa5, 0xeb, 0x83, 0x55, 0x26, 0x95, 0xa6, 0xe9, 0x17,
	0x94, 0x54, 0x16, 0xa4, 0x16, 0xeb, 0x97, 0x64, 0xe6, 0xa6, 0x16, 0x97, 0x24, 0xe6, 0x16, 0x20,
	0x58, 0x10, 0xd3, 0xa4, 0x74, 0x51, 0x34, 0xa7, 0xe7, 0x23, 0xb4, 0x82, 0x78, 0x60, 0x0e, 0x98,
	0x05, 0x51, 0xae, 0x14, 0xca, 0xc5, 0x1e, 0x02, 0xb1, 0x56, 0xc8, 0x8c, 0x8b, 0xad, 0x38, 0xbf,
	0xb4, 0x28, 0x39, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0xcf, 0x48, 0x4e, 0x0f, 0xcd, 0x61, 0x7a,
	0x50, 0x95, 0xc1, 0x60, 0x55, 0x41, 0x50, 0xd5, 0x42, 0x42, 0x5c, 0x2c, 0x45, 0xa9, 0x05, 0xf9,
	0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x96, 0x12, 0x17, 0x2f, 0x8a, 0x62, 0x21,
	0x41, 0x2e, 0x5e, 0x77, 0xb0, 0xc3, 0xc2, 0x53, 0x93, 0x32, 0xf2, 0xf3, 0xb3, 0x05, 0x18, 0x9c,
	0xdc, 0x7e, 0x3c, 0x94, 0x63, 0x5c, 0xf1, 0x48, 0x8e, 0x71, 0xc7, 0x23, 0x39, 0xc6, 0x13, 0x8f,
	0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x91, 0x4b, 0x38, 0x39, 0x27, 0xbf,
	0x34, 0x45, 0xaf, 0xb2, 0x38, 0xb3, 0x24, 0x05, 0xe6, 0x08, 0x27, 0x1e, 0xa8, 0x81, 0x01, 0x20,
	0x77, 0x07, 0x30, 0x46, 0xb1, 0x43, 0x25, 0x92, 0xd8, 0xc0, 0x3e, 0x31, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xfe, 0x2e, 0xf2, 0xe9, 0x57, 0x01, 0x00, 0x00,
}
